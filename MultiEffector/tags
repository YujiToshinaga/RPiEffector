!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.S	Makefile	/^vpath %.S	= $(SRC_DIRS)$/;"	m
.c	Makefile	/^vpath %.c	= $(SRC_DIRS)$/;"	m
.h	Makefile	/^vpath %.h	= $(INCLUDE_DIRS)$/;"	m
ALSA_PCM_NEW_HW_PARAMS_API	effector.c	4;"	d	file:
ALSA_PCM_NEW_HW_PARAMS_API	sounddev.c	4;"	d	file:
AR	Makefile	/^AR				= $(PREFIX)ar$/;"	m
ASFLAGS	Makefile	/^ASFLAGS			=$/;"	m
ASMS	Makefile	/^ASMS			=$/;"	m
CFLAGS	Makefile	/^CFLAGS			=$/;"	m
CH_NUM	sounddev.c	11;"	d	file:
COMMAND_NUM	shell.c	9;"	d	file:
DELAY_NUM	bak/bak.c	6;"	d	file:
DELAY_NUM	bak/sma.c	6;"	d	file:
DELAY_NUM	sma.c	7;"	d	file:
DONOTHING	effector.h	/^    DONOTHING,$/;"	e	enum:effector_status
DPNS	Makefile	/^DPNS			= $(ASMS:.S=.d) $(SRCS:.c=.d)$/;"	m
EFFCMD	effector.h	/^} EFFCMD;$/;"	t	typeref:struct:effector_command
EFFSTAT	effector.h	/^} EFFSTAT;$/;"	t	typeref:enum:effector_status
EFFTYPE	effector.h	/^} EFFTYPE;$/;"	t	typeref:enum:effector_type
ER	effector.h	/^} ER;$/;"	t	typeref:enum:error_code
ERROR	effector.h	/^    ERROR,$/;"	e	enum:error_code
EXIT	effector.h	/^    EXIT,$/;"	e	enum:effector_status
FALSE	stddef.h	4;"	d
FRAME_NUM	bak/bak.c	5;"	d	file:
FRAME_NUM	bak/sma.c	5;"	d	file:
FRAME_NUM	effector.h	4;"	d
GCC	Makefile	/^GCC				= $(PREFIX)gcc$/;"	m
INCLUDE_DIRS	Makefile	/^INCLUDE_DIRS	= .$/;"	m
INPUT_LEN	shell.c	8;"	d	file:
LD	Makefile	/^LD				= $(PREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS			=$/;"	m
NM	Makefile	/^NM				= $(PREFIX)nm$/;"	m
OBJCOPY	Makefile	/^OBJCOPY			= $(PREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP			= $(PREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS			= $(ASMS:.S=.o) $(SRCS:.c=.o)$/;"	m
OK	effector.h	/^    OK,$/;"	e	enum:error_code
PARAM_NUM	effector.h	5;"	d
PLAY	effector.h	/^    PLAY,$/;"	e	enum:effector_status
PREFIX	Makefile	/^PREFIX			=$/;"	m
RM	Makefile	/^RM				= rm -f$/;"	m
SAMPLING_RATE	sounddev.c	10;"	d	file:
SIZE	Makefile	/^SIZE			= $(PREFIX)size$/;"	m
SMA	effector.h	/^    SMA,$/;"	e	enum:effector_type
SRCS	Makefile	/^SRCS			=$/;"	m
SRC_DIRS	Makefile	/^SRC_DIRS		= .$/;"	m
STOP	effector.h	/^    STOP,$/;"	e	enum:effector_status
TARGET	Makefile	/^TARGET			= effector$/;"	m
TARGET_BIN	Makefile	/^TARGET_BIN		= $(TARGET).bin$/;"	m
TARGET_DUMP	Makefile	/^TARGET_DUMP		= $(TARGET).dump$/;"	m
TARGET_EXE	Makefile	/^TARGET_EXE		= $(TARGET)$/;"	m
TARGET_SREC	Makefile	/^TARGET_SREC		= $(TARGET).srec$/;"	m
TARGET_SYM	Makefile	/^TARGET_SYM		= $(TARGET).sym$/;"	m
THROUGH	effector.h	/^    THROUGH,$/;"	e	enum:effector_type
TRUE	stddef.h	5;"	d
__EFFECTOR_H__	effector.h	2;"	d
__SHELL_H__	shell.h	2;"	d
__SMA_H__	sma.h	2;"	d
__SOUNDDEV_H__	sounddev.h	2;"	d
__STDDEF_H__	stddef.h	2;"	d
__THROUGH_H__	through.h	2;"	d
effector	bak/bak.c	/^void effector() {$/;"	f
effector	bak/sma.c	/^void effector() {$/;"	f
effector	effector.c	/^void* effector()$/;"	f
effector_cmd	effector.c	/^static EFFCMD effector_cmd;$/;"	v	file:
effector_command	effector.h	/^typedef struct effector_command {$/;"	s
effector_exit	effector.c	/^void effector_exit(void) {$/;"	f
effector_fin	effector.c	/^static int effector_fin = FALSE;$/;"	v	file:
effector_init	effector.c	/^void effector_init(void) {$/;"	f
effector_play	effector.c	/^void effector_play(EFFCMD effcmd) {$/;"	f
effector_status	effector.h	/^typedef enum effector_status {$/;"	g
effector_stop	effector.c	/^void effector_stop() {$/;"	f
effector_thread	effector.c	/^static pthread_t effector_thread = (pthread_t)NULL;$/;"	v	file:
effector_type	effector.h	/^typedef enum effector_type {$/;"	g
effstat	effector.h	/^    EFFSTAT     effstat;$/;"	m	struct:effector_command
efftype	effector.h	/^    EFFTYPE     efftype;$/;"	m	struct:effector_command
error_code	effector.h	/^typedef enum error_code {$/;"	g
finish_effector	bak/bak.c	/^static int finish_effector = 0;$/;"	v	file:
finish_effector	bak/sma.c	/^static int finish_effector = 0;$/;"	v	file:
inhandle	sounddev.c	/^static snd_pcm_t *inhandle;$/;"	v	file:
main	bak/bak.c	/^int main(int argc, char *argv[])$/;"	f
main	bak/sma.c	/^int main(int argc, char *argv[])$/;"	f
main	main.c	/^int main(int argc, char *argv[])$/;"	f
mutex	bak/bak.c	/^static pthread_mutex_t mutex;$/;"	v	file:
mutex	bak/sma.c	/^static pthread_mutex_t mutex;$/;"	v	file:
noneff_init	bak/sma.c	/^void noneff_init(void)$/;"	f
noneff_init	sma.c	/^void noneff_init(void)$/;"	f
noneff_thread	bak/bak.c	/^void* noneff_thread()$/;"	f
noneff_thread	bak/sma.c	/^void* noneff_thread()$/;"	f
outhandle	sounddev.c	/^static snd_pcm_t *outhandle;$/;"	v	file:
param	effector.h	/^    int         param[PARAM_NUM];$/;"	m	struct:effector_command
shell	shell.c	/^void shell(EFFCMD *effcmd)$/;"	f
sma	sma.c	/^void sma(int **inbuf, int **outbuf)$/;"	f
sma_thread	bak/bak.c	/^void* sma_thread()$/;"	f
sma_thread	bak/sma.c	/^void* sma_thread()$/;"	f
sounddev_exit	sounddev.c	/^void sounddev_exit(void)$/;"	f
sounddev_init	sounddev.c	/^void sounddev_init(void)$/;"	f
sounddev_read	sounddev.c	/^int sounddev_read(int **inbuf, int frame_num)$/;"	f
sounddev_write	sounddev.c	/^int sounddev_write(int **outbuf, int frame_num)$/;"	f
through_exit	through.c	/^void through_exit(void)$/;"	f
through_init	through.c	/^void through_init(void)$/;"	f
through_main	through.c	/^void through_main(int **inbuf, int **outbuf)$/;"	f
